<?php
// $Id$

/**
 * @file
 *   a low level implementation for annotation_api. It supports user annotation
 *   in node scope
 */

function annotation_cs_block($op = 'list', $delta = 0, $edit = array()) {
  if ($op == 'list') {
    $blocks[0] = array(
      'info' => t('Annotation CS'),
      'weight' => 0,
      'status' => 1,
      'region' => 'right'
    );
    return $blocks;
  }
  else if ($op == 'configure' && $delta == 0) {
    //dpm($edit);
    $form['markuplink'] = array(
      '#type' => 'markup',
      '#value' =>  l(t('Annotation CS Settings page'), 'admin/settings/annotation_cs'),
      '#weight' => -90,
    );
    return $form;
  }
  else if ($op == 'save' && $delta == 0) {
    //variable_set('mymodule_block_items', $edit['items']);
  }
  else if ($op == 'view') {
    //dpm($edit);
    switch($delta) {
      case 0:
        $block = annotation_cs_block_view();
        break;
    }
    return $block;
  }

}

/**
 * View it.
 *
 * Get the current annotations.
 */
function annotation_cs_block_view() {
  $pos = _annotation_cs_node_object_position();
  $nid = arg($pos);
  $node = node_load($nid);
  $node_types = variable_get('annotation_cs_node_types', array());
  if (isset($node->annotation) || in_array($node->type, $node_types)) {
    $block = array(
      'subject' => t('Annotations for %title', array('%title' => $node->title)),
      'content' => annotation_cs_view_annotations($node),
    );
  }
  else {
    $block = NULL;
  }
  return $block;
}

/**
 * Retrieve the position to search for in the current page view.
 * @param $path
 *   if not set defaults to current path
 * @return
 *  position of node object in path, defined by annotation_cs setting
 */
function _annotation_cs_node_object_position($path = NULL) {
  if (!isset($path)) $path = $_GET['q'];

  $set = variable_get('annotation_cs_object_position_extended','');

  // Find the first match on path
  foreach($set as $spec) {
    if (drupal_match_path($path, $spec['path'])) {
      return $spec['arg'];
    }
  }
  // Default position
  return variable_get('annotation_cs_object_position', 1);
}

/**
 * View function for annotation_cs block.
 */
function annotation_cs_view_annotations($node) {
  // As annotation_node allready loads all available annotations to $node, no
  // additional loading is needed.
  $content = array();
  if (isset($node->annotation)) {
    foreach ($node->annotation as $annotation) {
      $content[] = array(
        '#value' => annotation_view($annotation),
      );
    }
  }

  /**
   * Add an add form
   */
  $default = variable_get('annotation_cs_default_vars', '.field-field-bild .field-items|0px|0px');
  GLOBAl $user;
  $new = array(
    'uid' => $user->uid,
    'type' => 'point',
    'vars' => $default,
    'scope_type' => 'node',
    'scope_id' => $node->nid,
    'content_type' => 'user',
  );
  $content['annotation_add'] = array('#value' => drupal_get_form('annotation_form', $new));

  $vars = explode('|', $default);
  $selector = current($vars);

  // Control buttons
  $sets = array(
    'selector' => $selector,
    'adder_show' => t('Add annotation'),
    'adder_hide' => t('Hide annotation add'),
    'viewer_show' => t('View annotations'),
    'viewer_hide' => t('Hide annotations'),
    'adder_default' => 'show',
    'viewer_default' => 'hide',
  );

  if (user_access('add annotation_cs')) {
    $links['adder'] = array('href' => $_GET['q'], 'title' => $sets['adder_'. $sets['adder_default']], 'attributes' => array('rel' => $sets['adder_default']), 'fragment' => 'annotation-cs');
  }
  if (user_access('view annotation_cs')) {
    $links['viewer'] = array('href' => $_GET['q'], 'title' => $sets['viewer_'. $sets['viewer_default']], 'attributes' => array('rel' => $sets['viewer_default']), 'fragment' => 'annotation-cs');
  }
  if (user_access('show manage annotation_cs')) {
    $links['manage'] = array('href' => 'node/'. $node->nid . '/annotations', 'title' => t('Manage annotations'));
  }
  $attributes = array('class' => 'annotation-cs-control');

  drupal_add_js(array('annotation_cs_control' => $sets), 'setting');
  drupal_add_js(drupal_get_path('module', 'annotation_cs') .'/annotation_cs.js', 'module');

  $content['links'] = array(
    '#value' => theme('links', $links, $attributes),
  );

  return drupal_render($content);
}


/**
 * Implementation of hook_annotation_info_alter().
 */
function annotation_cs_annotation_info_alter(&$info) {
  $info['content']['user']['form'] = 'annotation_cs_user_form';
}

/**
 * Subform for annotation form.
 */
function annotation_cs_user_form(&$form_state, $annotation) {

  $set = variable_get('annotation_cs_user_view', array('view' => 'freunde', 'display' => 'page_1'));
  $view = views_get_view($set['view']);

  if (!$view) {
    drupal_set_message('View %view for annotation_cs seems not to exist!', array('%view' => $set['view']),'error');
    GLOBAL $user;
    $options = array($user->uid => $user->name);
  }
  else {
    $view->set_arguments(array($annotation->uid, $annotation->scope_id, $annotation->content_id));
    $view->set_display($set['display']);
    //$view->init_display();
    $view->pre_execute();
    $view->execute();
    $options = array();
    $in_options = FALSE;
    foreach ($view->result as $u) {
      if ($u->uid == $annotation->content_id) $in_options = TRUE;
      $options[$u->uid] = $u->users_name;
    }

    // Add current selection
    if (!$in_options && $annotation->content_id) {
      $u_name = db_result(db_query_range('SELECT name FROM {users} WHERE uid = %d', $annotation->content_id, 0, 1));
      $options = array_merge( array($annotation->content_id => $u_name), $options);
    }
  }
  //$options = array(0, 1);
  return array(
    '#type' => 'select',
    '#options' => $options,
    //'#title' => t('User'),
  );
}

/**
 * Implementation of hook_menu().
 *
 * Provides settings page and node edit page.
 */
function annotation_cs_menu() {
  return array(
    'admin/settings/annotation_cs' => array(
      'title' => 'Annotation CS',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('annotation_cs_settings_form'),
      'access arguments' => array('administer content types'),
    ),
    'node/%node/annotations' => array(
      'title' => 'Manage Annotations',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('annotation_cs_node_form', 1),
      'access callback' => 'annotation_cs_access_node',
      'access arguments' => array(1),
      'file' => 'node.inc',
    ),
    'fotoserien/verlinkungen/%node/manage' => array(
      'title' => 'Manage Annotations',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('annotation_cs_node_form', 2),
      'access callback' => 'annotation_cs_access_node',
      'access arguments' => array(2),
      'file' => 'node.inc',
    ),
    /**'annotations/%annotation/delete' => array(
      'title' => 'Manage Annotations',
      'page callback' => 'annotation_cs_annotation_delete',
      'page arguments' => array(1),
      'access callback' => 'annotation_cs_access_annotation',
      'access arguments' => array(1),
      'file' => 'node.inc',
    ),*/
  );
}

/**
 * Implementation of hook_perm().
 */
function annotation_cs_perm() {
  return array(
    'add annotation_cs',
    'view annotation_cs',
    'show manage annotation_cs',
    'manage any annotation_cs',
    'manage own annotation_cs',
    'manage annotation_cs from own node',
    'manage annotation_cs to own profile'
  );
}

/**
 * Access callback for annotation_cs node edit form.
 */
function annotation_cs_access_node($node, $account = NULL) {
  if (!isset($account)) {
    GLOBAL $user;
    $account = $user;
  }
  if (user_access('manage any annotation_cs', $account)) {
    return TRUE;
  }
  elseif (user_access('manage annotation_cs from own node', $account) && $node->uid == $account->uid) {
    return TRUE;
  }
  if (isset($node->annotation) && count($node->annotation)) {
    $own = user_access('manage own annotation_cs');
    $to_profile = user_access('manage annotation_cs to own profile');
    foreach ($node->annotation as $annotation) {
      if ($own && $annotation->uid == $account->uid) {
        return TRUE;
      }
      elseif($to_profile && $annotation->content_id == $account->uid) {
        return TRUE;
      }
    }
  }
  return FALSE;
}

/**
 * Access callback for annotation_cs access delete form.
 */
function annotation_cs_access_annotation($annotation, $account = NULL) {
  if (!is_object($annotation)) {
    if (is_array($annotation)) {
      $annotation = (object) $annotation;
    }
    else {
      $annotation = annotation_load($annotation);
    }
  }
  if (!isset($account)) {
    GLOBAL $user;
    $account = $user;
  }
  if (user_access('manage any annotation_cs', $account)) {
    return TRUE;
  }
  elseif (user_access('manage own annotation_cs') && $annotation->uid == $account->uid) {
    return TRUE;
  }
  elseif(user_access('manage annotation_cs to own profile') && $annotation->content_id == $account->uid) {
    return TRUE;
  }
  elseif (user_access('manage annotation_cs from own node', $account)) {
    $node = node_load($annotation->scope_id);
    return ($node->uid == $account->uid);
  }
  return FALSE;
}

/**
 * Settings form for annotation_cs.
 */
function annotation_cs_settings_form(&$form_state) {
  $form['annotation_cs_default_vars'] = array(
    '#type' => 'textfield',
    '#title' => 'Default settings',
    '#default_value' => variable_get('annotation_cs_default_vars', '.field-field-bild .field-items|0px|0px'),
    '#description' => 'Format: <code>jquery selector|default_left|default_top</code>',
  );
  $form['annotation_cs_object_position'] = array(
    '#type' => 'select',
    '#title' => t('Default menu get object position'),
    '#options' => range(0,30),
    '#default_value' => variable_get('annotation_cs_object_position', 1),
    '#description' => t('Position of the node ID in the URL. This NID will be used to get the node object for the annotations.'),
  );

  // EXTENDED Arg position
  //Retrieve a new empty setting, without duplicate last empty ones
  $varset = variable_get('annotation_cs_object_position_extended', array());
  $set = array();
  // Cleanup empty ones
  if (is_array($varset) && count($varset)) {
    foreach ($varset as $id => $vars) {
      if ($vars['path']) {
        $set[] = $vars;
      }
    }
  }
  // Add new empty
  $set[] = array('path' => '', 'arg' => '');

  $form['annotation_cs_object_position_extended'] = array(
    '#tree' => TRUE,
    '#type' => 'fieldset',
    '#title' => t('Extended menu get object position'),
    '#description' => t('By this setting you can define a specific argument position for a special path.'
                          .'<br/> You can use the * wildcard, like in block visibility settings.'),
    '#collapsible' => TRUE,
  );
  // each setting
  foreach ($set as $id => $vars) {
    $form['annotation_cs_object_position_extended'][$id] = array(
      '#type' => 'fieldset',
      '#title' => ($vars['path']) ? $vars['path'] : t('New'),
      '#collapsible' => TRUE,
      '#collapsed' => $vars['path'],
      'path' => array('#type' => 'textfield', '#default_value' => $vars['path'], '#title' => t('Path')),
      'arg' => array('#type' => 'select','#options' => range(0,30),'#default_value' => $vars['arg'], '#title' => t('Position')),
    );
  }

  // Node types
  $form['annotation_cs_node_types'] = array(
    '#type' => 'select',
    '#title' => t('Node types'),
    '#options' => node_get_types('names'),
    '#default_value' => variable_get('annotation_cs_node_types', array()),
    '#multiple' => TRUE,
  );
  $set = variable_get('annotation_cs_user_view', array('view' => 'freunde', 'display' => 'page_1'));
  $form['annotation_cs_user_view'] = array(
    '#tree' => TRUE,
    '#type' => 'fieldset',
    '#title' => t('User selection view'),
    '#collapsible' => TRUE,
    'view' => array(
      '#type' => 'textfield',
      '#title' => t('View id'),
      '#default_value' => $set['view'],
      '#required' => TRUE,
    ),
    'display' => array(
      '#type' => 'textfield',
      '#title' => t('Display id'),
      '#default_value' => $set['display'],
      '#required' => TRUE,
    ),
    '#description' => t('The view is provided with three arguments. 1st - User ID of the annotator, 2nd - Node ID to annotate in, 3rd - the content user id'),
  );
  $form['annotation_cs_delete_button_label'] = array(
    '#type' => 'textfield',
    '#title' => t('Delete Button Label'),
    '#default_value' => variable_get('annotation_cs_delete_button_label', 'X'),
  );

  return system_settings_form($form);
}

function annotation_cs_theme() {
  return array(
    'annotation_cs_delete' => array(
      'arguments' => array('element' => NULL),
    )
  );
}


function annotation_cs_elements() {
  return array(
    'annotation_cs_delete' => array(
      '#input' => TRUE,
      '#process' => array('annotation_cs_delete_process'),
      //'#title' => t('Delete'),
      //'#value' => ?,
    ),
  );
}


function annotation_cs_delete_process($element) {
  $aid = $element['#value'];
  $title = (isset($element['#title'])) ? $element['#title'] : t('Delete');
  if ($aid && annotation_cs_access_annotation($aid)) {
    $element['annotatation_cs_delete_'. $aid] = array(
      '#type' => 'submit',
      '#value' => $title,
      '#submit' => array('annotation_cs_delete_submit'),
    );
  }
  return $element;
}

function annotation_cs_delete_submit($form, &$form_state) {
  $id = current($form_state['clicked_button']['#parents']);
  // only valid for prefix: annotatation_cs_delete_
  if (drupal_substr($id, 0, 23) == 'annotatation_cs_delete_') {
    $aid = drupal_substr($id, 23);
    $res = annotation_delete($aid);
  }
}

function theme_annotation_cs_delete($element) {
  unset($element['#value']);
  unset($element['#title']);
  return theme('item', $element);
}

function annotation_cs_delete_form(&$form_state, $aid) {
  $form['button'] = array(
    '#type' => 'annotation_cs_delete',
    '#value' => $aid,
    '#title' => variable_get('annotation_cs_delete_button_label', 'X'),
  );
  return $form;
}

function annotation_cs_preprocess_annotation_user(&$vars) {
  $aid = $vars['annotation']->aid;
  $vars['delete_button'] = drupal_get_form('annotation_cs_delete_form', $aid);
}

/**
 * Remove Show/Hide button.
 * Annotate content only once.
 */
function annotation_cs_form_alter(&$form, $form_state, $form_id) {
  if ($form_id == 'annotation_form' && $form['#annotation']->type == 'point') {
    unset($form['adder']);
    // Only allow content be annotated once in scope.
    $node = node_load($form['#annotation']->scope_id);
    if (isset($node->annotation) && is_array($node->annotation)) {
      foreach($node->annotation as $anno) {
        if ($anno->content_type == 'user' && $anno->content_id) {
          unset($form['content_id']['#options'][$anno->content_id]);
        }
      }
    }
  }
}